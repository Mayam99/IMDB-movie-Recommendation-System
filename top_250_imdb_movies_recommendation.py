# -*- coding: utf-8 -*-
"""Top 250 IMDB Movies-Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tvCC2ctMkpaw4CIx7YPUNAQViPNEoMqv

##Introduction to the IMDB Top 250 Movies Dataset
####The IMDB Top 250 Movies dataset, available on Kaggle, offers a comprehensive list of the highest-rated movies according to user ratings on the Internet Movie Database (IMDB). This dataset is an invaluable resource for movie enthusiasts, data analysts, and machine learning practitioners alike. It provides a rich source of information that can be used for various analytical and predictive tasks, including sentiment analysis, recommendation systems, and trend analysis.
####This dataset is having the data of the top 250 Movies as per their IMDB rating listed on the official website of IMDB

##Features
* rank - Movie Rank as per IMDB rating
* movie_id - Movie ID
* title - Name of the Movie
* year - Year of Movie release
* link - URL for the Movie
* imdb_votes - Number of people who voted for the IMDB rating
* imdb_rating - Rating of the Movie
* certificate - Movie Certification
* duration - Duration of the Movie
* genre - Genre of the Movie
* cast_id - ID of the cast member who have worked on the Movie
* cast_name - Name of the cast member who have worked on the Movie
* director_id - ID of the director who have directed the Movie
* director_name - Name of the director who have directed the Movie
* writer_id - ID of the writer who have wrote script for the Movie
* writer_name - Name of the writer who have wrote script for the Movie
* storyline - Storyline of the Movie
* user_id - ID of the user who wrote review for the Movie
* user_name - Name of the user who wrote review for the Movie
* review_id - ID of the user review
* review_title - Short review
* review_content - Long review

##Source
https://www.kaggle.com/datasets/karkavelrajaj/imdb-top-250-movies

##Importing Necessary Libraries
"""

import pandas as pd #Pandas is a powerful library for data manipulation and analysis.

df = pd.read_csv('movies.csv') #Loading the dataset.

"""####We will now read the data from a CSV file into a Pandas DataFrame Let us have a look at how our dataset looks like using df.head()"""

df.head() #Displays the first 5 rows of the dataset.

"""##Exploring the Data:
###Understanding the dataset by exploring its structure and contents.
"""

df.columns # Displays the names of the columns

df.shape # Displays the total count of the Rows and Columns respectively.

df.info() #Displays the total count of values present in the particular column along with the null count and data type.

"""##Data Cleaning:
###Checking for missing values, duplicates, or any inconsistencies and clean the data accordingly.
"""

df.isnull().sum()

"""As we can check there is only 1 null value in the certificate column. As the count of the null value is much less, we can drop the null value as it will not affect the the out come as what we want to predict.

"""

df.drop_duplicates(inplace=True) #Dropping the duplicate values in the dataset.

df = df.dropna() #Dropping the null values in the dataset.

df.isnull().sum() #Displays the total count of the null values in the particular columns.

"""Now there is no null value in the dataset.

##Feature Selection
###Identify the features that will be used for the recommendation system. Common features include:

* Title
* Genre
* Director
* Actors
* Rating
* Year

###Here we are creating a data frame df['combined_features'] that will contain the the columns like genre, director name, cast name.
"""

df['combined_features'] = df['genre'] + ' ' + df['director_name'] + ' ' + df['cast_name']

"""##TF-IDF (Term Frequency-Inverse Document Frequency):

####Term Frequency (TF): Measures the frequency of a word in a document.

####Inverse Document Frequency (IDF): Measures how important a word is. It decreases the weight of commonly occurring words and increases the weight of words that are rare across documents.

####The TF-IDF score for a word in a document is the product of its TF and IDF scores. This helps in giving more importance to unique words in a document and less to common words like "the", "and", etc.
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(stop_words='english')
#Creates an instance of TfidfVectorizer with the stop_words parameter set to 'english'.
#stop_words='english' means that common English words (like "the", "is", "in") will be ignored when computing the TF-IDF scores. These are known as stop words, and removing them helps to focus on the more meaningful words in the text.

tfidf_matrix = tfidf.fit_transform(df['combined_features']) #df['combined_features'] is a pandas Series containing the text data of combined features (e.g., genre, director, actors).
#fit_transform method does two things:
#Fit: Learns the vocabulary and IDF from the combined features.
#Transform: Transforms the combined features into a TF-IDF matrix.

"""##Benefits
###Dimensionality Reduction: By ignoring common words, it reduces the number of features.
###Importance Weighting: TF-IDF gives higher importance to rare and meaningful words, making it easier to compare documents (movies) based on significant terms.

##Understanding cosine_similarity
###Cosine Similarity:

* Cosine similarity is a measure of similarity between two non-zero vectors.
* It calculates the cosine of the angle between two vectors in a multi-dimensional space.
* The cosine similarity is bounded between -1 and 1, where:
* 1 means the vectors are identical.
* 0 means the vectors are orthogonal (no similarity).
* -1 means the vectors are diametrically opposite.
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix) #This function will provide the top 10 movies that are most similar to "The Godfather" based on the cosine similarity of their TF-IDF features.

"""###tfidf_matrix:

###tfidf_matrix is a sparse matrix where each row represents a movie and each column represents a word (term) from the combined features. The values in the matrix are the TF-IDF scores.

###cosine_similarity(tfidf_matrix, tfidf_matrix):

###The cosine_similarity function from sklearn.metrics.pairwise computes the cosine similarity between all pairs of rows in the tfidf_matrix.
###By passing tfidf_matrix as both arguments, it calculates the pairwise cosine similarity for all movies with each other.

##The Model
###Here's the explanation of the get_recommendations function:

####1) Get Movie Index:
####Find the index of the movie that matches the provided title.

####2) Calculate Similarity Scores:
####Retrieve the cosine similarity scores for all movies with the selected movie.
#####enumerate pairs each movie's index with its similarity score.

#####3) Sort Similarity Scores:
#####Sort these similarity scores in descending order (most similar first).

####4) Select Top Movies:
####Select the top 10 most similar movies, excluding the first one (which is the movie itself).

####5) Retrieve Movie Titles:

####Get the indices of these top similar movies.
####Return their titles from the dataframe.
"""

def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = df[df['title'] == title].index[0]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return df['title'].iloc[movie_indices]

recommendations = get_recommendations('The Godfather') #As we input the name of the movie, we get the reccomendations.
recommendations

recommendations = get_recommendations('The Dark Knight') #testing with other movie names
recommendations

recommendations = get_recommendations('12 Angry Men') #testing with other movie names
recommendations